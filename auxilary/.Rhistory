op_2$class <- "2"
op_4 <- read.table("OmegaPlus_Report.4_mp")
op_4$class <- "4"
op_3 <- read.table("OmegaPlus_Report.3_mp")
op_3$class <- "3"
op_5 <- read.table("OmegaPlus_Report.5_mp")
op_5$class <- "5"
op_6 <- read.table("OmegaPlus_Report.6_mp")
op_6$class <- "6"
op_7 <- read.table("OmegaPlus_Report.7_mp")
op_7$class <- "7"
op_8 <- read.table("OmegaPlus_Report.8_mp")
op_8$class <- "8"
op_dat <- rbind(op_US,op_UK,op_NZ,op_badger,op_deer,op_possum,op_1,op_2,op_3,op_4,op_5,op_6,op_7,op_8)
op_dat$coords <- rownames(op_dat)
colnames(op_dat)[1] <- "omega"
#clean
for (group in 1:length(unique(op_dat$class))){
current <- unique(op_dat$class)[group]
op_gg <- op_dat %>% filter(class == current) %>% ggplot(aes(x=floor(as.numeric(coords)),y=omega)) + geom_point() +
theme_minimal() +
xlab("genomic position") +
ylab("omega value") +
ggtitle(current)
plot(op_gg)
# we want to find the genomic sites that are significantly higher than expected and cross reference that with M. bovis genes - will be the work of tomorrow.
}
op_dat  %>% ggplot(aes(x=floor(as.numeric(coords)),y=omega)) + geom_point() +
theme_minimal() +
xlab("genomic position") +
ylab("omega value") + facet_wrap(~ class, ncol = 4)
#population cluster 2: genes affected: PPE55b, PPE55a, ilvX, Mb3540c
#population cluster 4: ilvX, PE_PGRS55, fadD18, PE_PGRS57
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Species <- factor(recomb_extend$Species)
mbov_rf <- randomForest(Species ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
#importance(mbov_rf)
species_rf <- as.data.frame(varImpPlot(mbov_rf))
species_rf$class <- "Species"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Country <- factor(recomb_extend$Country)
mbov_rf <- randomForest(Country ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
country_rf <- as.data.frame(varImpPlot(mbov_rf))
country_rf$class <- "Country"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Clusters <- factor(recomb_extend$fastbaps)
mbov_rf <- randomForest(Clusters ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
cluster_rf <- as.data.frame(varImpPlot(mbov_rf))
cluster_rf$class <- "Population Cluster"
mbov_rf.results <- rbind(species_rf,country_rf,cluster_rf)
for(i in 1:length(unique(mbov_rf.results$class))){
current = unique(mbov_rf.results$class)[i]
sub_data <- subset(mbov_rf.results,class == current)
#For accuracy
quant251 <- quantile(sub_data$MeanDecreaseAccuracy,0.25)
quant751 <- quantile(sub_data$MeanDecreaseAccuracy,0.75)
iqr1 = quant751 - quant251
threshold1 = iqr1*1.5 + quant751
#For gini
quant252 <- quantile(sub_data$MeanDecreaseGini,0.25)
quant752 <- quantile(sub_data$MeanDecreaseGini,0.75)
iqr2 = quant752 - quant252
threshold2 = iqr2*1.5 + quant752
sub_data$importance <- ifelse(sub_data$MeanDecreaseAccuracy > threshold1 & sub_data$MeanDecreaseGini > threshold2, "TRUE", "FALSE")
print(subset(sub_data,importance == "TRUE"))
plot(sub_data %>% ggplot(aes(x=MeanDecreaseAccuracy, y=MeanDecreaseGini,color = importance)) +
geom_point() +
theme_minimal()+
scale_color_manual(values = c("gray","black")) +
ggtitle(current))
}
## figure out how to put these in a grid?
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Species <- factor(recomb_extend$Species)
mbov_rf <- randomForest(Species ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
#importance(mbov_rf)
species_rf <- as.data.frame(varImpPlot(mbov_rf))
species_rf$class <- "Species"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Country <- factor(recomb_extend$Country)
mbov_rf <- randomForest(Country ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
country_rf <- as.data.frame(varImpPlot(mbov_rf))
country_rf$class <- "Country"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Clusters <- factor(recomb_extend$fastbaps)
mbov_rf <- randomForest(Clusters ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
cluster_rf <- as.data.frame(varImpPlot(mbov_rf))
cluster_rf$class <- "Population Cluster"
mbov_rf.results <- rbind(species_rf,country_rf,cluster_rf)
for(i in 1:length(unique(mbov_rf.results$class))){
current = unique(mbov_rf.results$class)[i]
sub_data <- subset(mbov_rf.results,class == current)
#For accuracy
quant251 <- quantile(sub_data$MeanDecreaseAccuracy,0.25)
quant751 <- quantile(sub_data$MeanDecreaseAccuracy,0.75)
iqr1 = quant751 - quant251
threshold1 = iqr1*1.5 + quant751
#For gini
quant252 <- quantile(sub_data$MeanDecreaseGini,0.25)
quant752 <- quantile(sub_data$MeanDecreaseGini,0.75)
iqr2 = quant752 - quant252
threshold2 = iqr2*1.5 + quant752
sub_data$importance <- ifelse(sub_data$MeanDecreaseAccuracy > threshold1 & sub_data$MeanDecreaseGini > threshold2, "TRUE", "FALSE")
print(subset(sub_data,importance == "TRUE"))
plot(sub_data %>% ggplot(aes(x=MeanDecreaseAccuracy, y=MeanDecreaseGini,color = importance)) +
geom_point() +
theme_minimal()+
scale_color_manual(values = c("gray","black")) +
ggtitle(current))
}
## figure out how to put these in a grid?
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Species <- factor(recomb_extend$Species)
mbov_rf <- randomForest(Species ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=10000)
#importance(mbov_rf)
species_rf <- as.data.frame(varImpPlot(mbov_rf))
species_rf$class <- "Species"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Country <- factor(recomb_extend$Country)
mbov_rf <- randomForest(Country ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=10000)
country_rf <- as.data.frame(varImpPlot(mbov_rf))
country_rf$class <- "Country"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Clusters <- factor(recomb_extend$fastbaps)
mbov_rf <- randomForest(Clusters ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=10000)
cluster_rf <- as.data.frame(varImpPlot(mbov_rf))
setwd("mbovpan/auxilary/")
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt <- subset(rt,V1 !=500)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
theme(axis.title = element_text(size = 15))
rt %>% ggplot(aes(V1,V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
library(dplyr)
library(ggplot2)
library(reshape)
View(accessory_pa)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa))
heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
accessory_pa %>% pivot_longer(!gene_name, names_to = "sample", values_to = "present")
library(dplyr)
library(ggplot2)
library(tidyr)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa$gene_name <- rownames(accessory_pa)
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa))
heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
accessory_pa %>% pivot_longer(!gene_name, names_to = "sample", values_to = "present")
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
accessory_pa$gene_name <- rownames(accessory_pa)
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa))
heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa))
heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
rownames(accessory_pa)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
accessory_pa$gene_name <- rownames(accessory_pa)
accessory_pa %>% pivot_longer(!gene_name, names_to = "sample", values_to = "present")
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
long_prab <- accessory_pa$gene_name <- rownames(accessory_pa)
long_prab %>% ggplot(aes(x=gene_name,y=sample,fill=present)) +
geom_tile()
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
long_prab <- accessory_pa$gene_name <- rownames(accessory_pa)
long_prab %>% ggplot(aes(x=gene_name,y=sample,fill=as.numeric(present))) +
geom_tile()
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
accessory_pa$gene_name <- rownames(accessory_pa)
long_prab <- accessory_pa %>% pivot_longer(!gene_name, names_to = "sample", values_to = "present")
long_prab %>% ggplot(aes(x=gene_name,y=sample,fill=as.numeric(present))) +
geom_tile()
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
accessory_pa$gene_name <- rownames(accessory_pa)
long_prab <- accessory_pa %>% pivot_longer(!gene_name, names_to = "sample", values_to = "present")
long_prab %>% ggplot(aes(x=gene_name,y=sample,fill=present)) +
geom_tile() +   scale_fill_manual(label=c("absent","present"),values=c("white","black")) +
theme(text = element_text(size = 15),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks =element_blank(),
legend.key = element_rect(fill = "white", colour = "black")
)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = species, col = species)) +
geom_point() +
theme_minimal()
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = species, col = species)) +
geom_point() +
theme_minimal()
species.clust
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = species, col = species)) +
geom_point() +
theme_minimal()
plot(species.clust)
View(scores)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
View(mbov_meta)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC3,y=PC4, fill = species, col = species)) +
geom_point() +
theme_minimal()
plot(species.clust)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
plot(species.clust)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC3, fill = species, col = species)) +
geom_point() +
theme_minimal()
plot(species.clust)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
plot(species.clust)
install.packages("rgl")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rgl)
install.packages("plotly")
library(dplyr)
library(ggplot2)
library(tidyr)
library(plotly)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
fig <- plot_ly(scores, x = ~PC1, y = ~PC2, z = ~PC3, color = ~species, colors = c('#BF382A', '#0C4B8E'))
fig
