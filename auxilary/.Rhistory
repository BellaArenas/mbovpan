axis.title.x = element_text(size = 15),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 15)) +
xlab("Clusters") +
coord_flip() +
scale_fill_grey()
grid.arrange(country_box,species_box,cluster_box,nrow = 2)
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
recomb_heat_nolab$num_hr <- rowSums(recomb_heat_nolab)
num_genomes <- as.data.frame(colSums(recomb_heat_nolab))
colnames(num_genomes)[1] <- "num"
a <- recomb_heat_nolab %>% ggplot(aes(x=num_hr)) +
geom_histogram(binwidth=1) +
labs(tag = "A")
b <- num_genomes %>% filter(num < 700)  %>% ggplot(aes(x=num)) +
geom_histogram(binwidth=10) +
labs(tag = "B")
grid.arrange(a,b, nrow = 1)
setwd("../dependencies/")
recomb_genes <- read.table("recomb_gene.tbl",col.names = paste0("V",seq_len(10)), fill=TRUE)
# Need to develop a script for the percentage
#hr_perc <-read.csv("hr_percentage.csv")
region <- gsub(".bed","",gsub("_","-",recomb_genes$V1))
gene_name <- gsub(";gbkey","",gsub("Name=","",stringr::str_extract(string = recomb_genes$V4,pattern = "Name=.*;gbkey")))
hr_impact.tbl <- data.frame(region,gene_name)
hr_impact.tbl %>% unique() %>% gt( ) %>% tab_header(title = "Mycobacterium bovis genes impacted by homologous recombination")
write.csv(hr_impact.tbl,"mbov_hr_impact.csv")
setwd("../dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
import_gg <- hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("length of homologous recombination region") + labs(tag = "A")
snp_size_gg <- hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("# SNPs within a homologous recombination region") + labs(tag = "B")
grid.arrange(import_gg,snp_size_gg,nrow=1)
mbov_snp <- "../dependencies/mbov_snp.fasta"
sparse.data <- import_fasta_sparse_nt(mbov_snp)
sparse.data <- optimise_prior(sparse.data, type = "optimise.symmetric")
baps.hc <- fast_baps(sparse.data)
best.partition <- best_baps_partition(sparse.data, baps.hc)
iqtree <- phytools::read.newick("../dependencies/mbov_align.contree")
plot.df <- data.frame(id = colnames(sparse.data$snp.matrix), fastbaps = best.partition,
stringsAsFactors = FALSE)
isolate_dat = read.csv("../dependencies/filtered_isolate_list.csv",header = TRUE)
isolate_dat <- isolate_dat %>% left_join(plot.df,by=c("Sample"="id"))
gg <- ggtree(iqtree)
pop_clust <- facet_plot(gg, panel = "fastbaps", data = plot.df, geom = geom_tile, aes(x = fastbaps), color = "blue")
pop_clust
mbov_tree <- read.newick("../dependencies/mbov_align.contree")
#change labels
old_bov <- c("BOVINE-Michigan","BOVINE-UK","BOVINE-NZ")
for(i in 1:length(old_bov)){
isolate_dat$Species <- gsub(old_bov[i],"BOVINE",isolate_dat$Species)
}
old_cerv <- c("WTD-Michigan","ELK-Michigan","CERVINE-NZ")
for(i in 1:length(old_cerv)){
isolate_dat$Species <- gsub(old_cerv[i],"CERVINE",isolate_dat$Species)
}
isolate_dat$Species <- gsub("-UK","",isolate_dat$Species)
isolate_dat$Species <- gsub("-NZ","",isolate_dat$Species)
isolate_dat$Species <- gsub("-US","",isolate_dat$Species)
mbov_tree <- root(mbov_tree,"LT708304.1")
mbov_tree <- drop.tip(mbov_tree,"LT708304.1")
mbov <- ggtree(mbov_tree)
baps_heat <- as.data.frame(as.factor(isolate_dat$fastbaps))
rownames(baps_heat) <- isolate_dat$Sample
species_heat <- as.data.frame(as.factor(isolate_dat$Species))
rownames(species_heat) <- isolate_dat$Sample
country_heat <- as.data.frame(as.factor(isolate_dat$Country))
rownames(country_heat) <- isolate_dat$Sample
#color palettes
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cb_col <- colorRampPalette(cbPalette)
species_col <- palette.colors(7)
country_col <- hcl.colors(3,"SunsetDark")
mbov_node_support <- mbov %<+% isolate_dat +
geom_point2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) <= 100 & as.numeric(label) > 75), color = "black",size = 0.85) +
geom_point2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) <= 75 & as.numeric(label) > 50), color = "#850000",size = 0.85) +
geom_point2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) <= 50), color = "red", size = 0.85) +
geom_point2(aes(label=label, subset = isTip, color = Species, shape = Country), size = 2) + scale_color_manual(values = species_col)
final_tree <- gheatmap(mbov_node_support,baps_heat,width = 0.1, colnames = FALSE, legend_title = "hey") + scale_fill_manual(values = cb_col(8))
#edit color palletes
#add the legends neatly (powerpoint)
# 6. Node support, circular, no branch lengths, 3 heatmaps,
#Find a way to color the internal nodes differently
#color palettes
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cb_col <- colorRampPalette(cbPalette)
species_col <- hcl.colors(7, "RdBu")
country_col <- hcl.colors(3,"Plasma")
x <- c(rep(NA,700),as.numeric(mbov_tree$node.label))
col <- cut(x, breaks=c(0,50,75,100))
col <- factor(col, levels=rev(levels(col)))
col <- factor(col, labels=c("76-100%","51-75%","0-50%"))
mbov <- ggtree(mbov_tree, layout = "circular", branch.length = "none")
mbov_node_support <- mbov %<+% isolate_dat +
geom_point2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) <= 100 & as.numeric(label) > 75), color = "black",size = 0.85, show.legend = TRUE) +
geom_point2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) <= 75 & as.numeric(label) > 50), color = "grey50",size = 0.85, show.legend = TRUE) +
geom_point2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) <= 50), color = "grey", size = 0.85, show.legend = TRUE)
t1 <- gheatmap(mbov_node_support,baps_heat,width = 0.1, colnames = FALSE, legend_title = "Population Cluster") + scale_fill_manual(values = cb_col(8), name = "Population Cluster")
t2 <- t1 + new_scale_fill()
t2_1 <- gheatmap(t2,species_heat,offset = 5, width = 0.1, colnames = FALSE, legend_title = "Species") +  scale_fill_manual(values = species_col, name = "Species")
t3 <- t2_1 + new_scale_fill()
mbov_final <- gheatmap(t3,country_heat,offset = 10, width = 0.1, colnames = FALSE, legend_title = "Country") +
scale_fill_manual(values = country_col, name = "Country")
mbov <- ggtree(mbov_tree, layout = "circular", branch.length = "none")
mbov_node_support <- mbov %<+% isolate_dat +
geom_point2(aes(color=col), show.legend = TRUE) +
geom_point2(aes(label=label, subset = isTip, color = "tip")) +
scale_color_manual(values = c("red","maroon","gray75","black"), name = "Bootstrap Support")
t1 <- gheatmap(mbov_node_support,baps_heat,width = 0.1, colnames = FALSE, legend_title = "Population Cluster") + scale_fill_manual(values = cb_col(8), name = "Population Cluster")
t2 <- t1 + new_scale_fill()
t2_1 <- gheatmap(t2,species_heat,offset = 5, width = 0.1, colnames = FALSE, legend_title = "Species") +  scale_fill_manual(values = species_col, name = "Species")
t3 <- t2_1 + new_scale_fill()
mbov_final <- gheatmap(t3,country_heat,offset = 10, width = 0.1, colnames = FALSE, legend_title = "Country") +
scale_fill_manual(values = country_col, name = "Country")
mbov_final
import_num <- read.csv("../dependencies/isolate_import_num.csv",header = TRUE)
accession_meta <- read.csv("../dependencies/filtered_isolate_list.csv", header = TRUE, stringsAsFactors = FALSE)
import_num <- import_num %>% left_join(isolate_dat,by = c("label"= "Sample"))
import_num$X0 <- recomb_heat_nolab$num_hr
country_no_lookup <- import_num %>% group_by(Country) %>% summarise(n=n()) %>% mutate(country_ext = paste0(Country," (",n,")"))
import_num <- import_num %>% left_join(country_no_lookup,by = c("Country"))
country_box <- ggplot(import_num, aes(x=country_ext, y=X0, fill=Country)) +
geom_boxplot() +
labs(y="# HR regions") +
labs(tag = "A") +
theme(axis.text = element_text(size = 15),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 15)) +
xlab("Country") +
coord_flip() +
scale_fill_grey()
species_no_lookup <- import_num %>% group_by(Species) %>% summarise(n=n()) %>% mutate(species_ext = paste0(Species," (",n,")"))
import_num <- import_num %>% left_join(species_no_lookup,by = c("Species"))
species_box <- ggplot(subset(import_num,import_num$Species != "STOAT"), aes(x=species_ext, y=X0, fill=Species)) +
geom_boxplot() +
labs(y="# HR regions") +
labs(tag = "B") +
theme(axis.text = element_text(size = 15),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 15)) +
xlab("Species") +
coord_flip() +
scale_fill_grey()
cluster_no_lookup <- import_num %>% group_by(fastbaps) %>% summarise(n=n()) %>% mutate(cluster_ext = paste0(fastbaps," (",n,")"))
import_num <- import_num %>% left_join(cluster_no_lookup,by = c("fastbaps"))
cluster_box <- ggplot(import_num, aes(x=cluster_ext, y=X0, fill=factor(fastbaps))) +
geom_boxplot() +
labs(y="# HR regions") +
labs(tag = "C") +
theme(axis.text = element_text(size = 15),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 15)) +
xlab("Clusters") +
coord_flip() +
scale_fill_grey()
grid.arrange(country_box,species_box,cluster_box,nrow = 2)
setwd("../dependencies/selective_sweep/")
op_US <- read.table("OmegaPlus_Report.US_mp")
op_US$class <- "USA"
op_UK <- read.table("OmegaPlus_Report.UK_mp")
op_UK$class <- "UK"
op_NZ <- read.table("OmegaPlus_Report.NZ_mp")
op_NZ$class <- "NZ"
op_badger <- read.table("OmegaPlus_Report.badger_mp")
op_badger$class <- "badger"
op_deer <- read.table("OmegaPlus_Report.deer_mp")
op_deer$class <- "deer"
op_possum <- read.table("OmegaPlus_Report.possum_mp")
op_possum$class <- "possum"
op_1 <- read.table("OmegaPlus_Report.1_mp")
op_1$class <- "1"
op_2 <- read.table("OmegaPlus_Report.2_mp")
op_2$class <- "2"
op_4 <- read.table("OmegaPlus_Report.4_mp")
op_4$class <- "4"
op_3 <- read.table("OmegaPlus_Report.3_mp")
op_3$class <- "3"
op_5 <- read.table("OmegaPlus_Report.5_mp")
op_5$class <- "5"
op_6 <- read.table("OmegaPlus_Report.6_mp")
op_6$class <- "6"
op_7 <- read.table("OmegaPlus_Report.7_mp")
op_7$class <- "7"
op_8 <- read.table("OmegaPlus_Report.8_mp")
op_8$class <- "8"
op_dat <- rbind(op_US,op_UK,op_NZ,op_badger,op_deer,op_possum,op_1,op_2,op_3,op_4,op_5,op_6,op_7,op_8)
op_dat$coords <- rownames(op_dat)
colnames(op_dat)[1] <- "omega"
#clean
for (group in 1:length(unique(op_dat$class))){
current <- unique(op_dat$class)[group]
op_gg <- op_dat %>% filter(class == current) %>% ggplot(aes(x=floor(as.numeric(coords)),y=omega)) + geom_point() +
theme_minimal() +
xlab("genomic position") +
ylab("omega value") +
ggtitle(current)
plot(op_gg)
# we want to find the genomic sites that are significantly higher than expected and cross reference that with M. bovis genes - will be the work of tomorrow.
}
op_dat  %>% ggplot(aes(x=floor(as.numeric(coords)),y=omega)) + geom_point() +
theme_minimal() +
xlab("genomic position") +
ylab("omega value") + facet_wrap(~ class, ncol = 4)
#population cluster 2: genes affected: PPE55b, PPE55a, ilvX, Mb3540c
#population cluster 4: ilvX, PE_PGRS55, fadD18, PE_PGRS57
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Species <- factor(recomb_extend$Species)
mbov_rf <- randomForest(Species ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
#importance(mbov_rf)
species_rf <- as.data.frame(varImpPlot(mbov_rf))
species_rf$class <- "Species"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Country <- factor(recomb_extend$Country)
mbov_rf <- randomForest(Country ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
country_rf <- as.data.frame(varImpPlot(mbov_rf))
country_rf$class <- "Country"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Clusters <- factor(recomb_extend$fastbaps)
mbov_rf <- randomForest(Clusters ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
cluster_rf <- as.data.frame(varImpPlot(mbov_rf))
cluster_rf$class <- "Population Cluster"
mbov_rf.results <- rbind(species_rf,country_rf,cluster_rf)
for(i in 1:length(unique(mbov_rf.results$class))){
current = unique(mbov_rf.results$class)[i]
sub_data <- subset(mbov_rf.results,class == current)
#For accuracy
quant251 <- quantile(sub_data$MeanDecreaseAccuracy,0.25)
quant751 <- quantile(sub_data$MeanDecreaseAccuracy,0.75)
iqr1 = quant751 - quant251
threshold1 = iqr1*1.5 + quant751
#For gini
quant252 <- quantile(sub_data$MeanDecreaseGini,0.25)
quant752 <- quantile(sub_data$MeanDecreaseGini,0.75)
iqr2 = quant752 - quant252
threshold2 = iqr2*1.5 + quant752
sub_data$importance <- ifelse(sub_data$MeanDecreaseAccuracy > threshold1 & sub_data$MeanDecreaseGini > threshold2, "TRUE", "FALSE")
print(subset(sub_data,importance == "TRUE"))
plot(sub_data %>% ggplot(aes(x=MeanDecreaseAccuracy, y=MeanDecreaseGini,color = importance)) +
geom_point() +
theme_minimal()+
scale_color_manual(values = c("gray","black")) +
ggtitle(current))
}
## figure out how to put these in a grid?
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Species <- factor(recomb_extend$Species)
mbov_rf <- randomForest(Species ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
#importance(mbov_rf)
species_rf <- as.data.frame(varImpPlot(mbov_rf))
species_rf$class <- "Species"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Country <- factor(recomb_extend$Country)
mbov_rf <- randomForest(Country ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
country_rf <- as.data.frame(varImpPlot(mbov_rf))
country_rf$class <- "Country"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Clusters <- factor(recomb_extend$fastbaps)
mbov_rf <- randomForest(Clusters ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=1000)
cluster_rf <- as.data.frame(varImpPlot(mbov_rf))
cluster_rf$class <- "Population Cluster"
mbov_rf.results <- rbind(species_rf,country_rf,cluster_rf)
for(i in 1:length(unique(mbov_rf.results$class))){
current = unique(mbov_rf.results$class)[i]
sub_data <- subset(mbov_rf.results,class == current)
#For accuracy
quant251 <- quantile(sub_data$MeanDecreaseAccuracy,0.25)
quant751 <- quantile(sub_data$MeanDecreaseAccuracy,0.75)
iqr1 = quant751 - quant251
threshold1 = iqr1*1.5 + quant751
#For gini
quant252 <- quantile(sub_data$MeanDecreaseGini,0.25)
quant752 <- quantile(sub_data$MeanDecreaseGini,0.75)
iqr2 = quant752 - quant252
threshold2 = iqr2*1.5 + quant752
sub_data$importance <- ifelse(sub_data$MeanDecreaseAccuracy > threshold1 & sub_data$MeanDecreaseGini > threshold2, "TRUE", "FALSE")
print(subset(sub_data,importance == "TRUE"))
plot(sub_data %>% ggplot(aes(x=MeanDecreaseAccuracy, y=MeanDecreaseGini,color = importance)) +
geom_point() +
theme_minimal()+
scale_color_manual(values = c("gray","black")) +
ggtitle(current))
}
## figure out how to put these in a grid?
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Species <- factor(recomb_extend$Species)
mbov_rf <- randomForest(Species ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=10000)
#importance(mbov_rf)
species_rf <- as.data.frame(varImpPlot(mbov_rf))
species_rf$class <- "Species"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Country <- factor(recomb_extend$Country)
mbov_rf <- randomForest(Country ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=10000)
country_rf <- as.data.frame(varImpPlot(mbov_rf))
country_rf$class <- "Country"
recomb_heat_nolab <-recomb_heat[,-which(names(recomb_heat) %in% c("label"))]
colnames(recomb_heat_nolab) <- paste0("V",colnames(recomb_heat_nolab))
recomb_heat_nolab$Clusters <- factor(recomb_extend$fastbaps)
mbov_rf <- randomForest(Clusters ~ .,data = recomb_heat_nolab,importance=TRUE, ntree=10000)
cluster_rf <- as.data.frame(varImpPlot(mbov_rf))
setwd("mbovpan/auxilary/")
knitr::opts_chunk$set(echo = TRUE)
rt <- read.csv("snpcalling_runtimes.csv")
rt <- read.csv("snpcalling_runtimes.csv")
head(rt)
library(dplyr)
library(ggplot2)
rt <- read.csv("snpcalling_runtimes.csv")
head(rt)
rt %>% ggplot(aes(V1,V2)) +
geom_violin()
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(V1,V2)) +
geom_violin()
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2)) +
geom_violin()
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2)) +
geom_violin() + theme_minimal()
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2)) +
geom_violin(aes(fill = "gray")) + theme_minimal()
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2)) +
geom_violin(aes(color = "gray")) + theme_minimal()
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2)) +
geom_violin(fill = "gray") + theme_minimal()
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (sec)")
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (sec)")
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(method="lm")
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(method="lm") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(color = "black",method="lm",se=TRUE) +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60)color = "black",method="lm",se=TRUE) +
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm",se=TRUE) +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(V1,V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt %>% ggplot(aes(V1,V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt <- subset(rt,V1 !=500)
rt %>% ggplot(aes(V1,V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt <- subset(rt,V1 !=500)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
rt %>% ggplot(aes(V1,V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt <- subset(rt,V1 !=500)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
theme(axis.title = element_text(size = 15))
rt %>% ggplot(aes(V1,V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt <- subset(rt,V1 !=500)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
theme(axis.title = element_text(size = 15))
rt %>% ggplot(aes(V1,V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
