}
if(is.na(mbov$data$support[i])){
print("true")
mbov$data$support[i] = 0
}
else{
next
}
}
mbov$data$higher75 <- FALSE
mbov$data[mbov$data$support >= 75,]$higher75 <- TRUE
mbov_node_support <- mbov %<+% isolate_dat +
geom_point2(aes(subset=(!isTip & higher75 == TRUE),color=higher75),size = 1.5) +
#geom_point2(aes(color=col), show.legend = TRUE) +
scale_color_manual(values = c("black"), name = "Bootstrap Support", labels = c("75 or greater"))
t1 <- gheatmap(mbov_node_support,baps_heat,width = 0.1, colnames = FALSE,legend_title = "Population Cluster") + scale_fill_manual(values = cb_col(8), name = "Population Cluster")
t2 <- t1 + new_scale_fill()
t2_1 <- gheatmap(t2,country_heat,offset = 0.003, width = 0.1, colnames = FALSE, legend_title = "Country") +  scale_fill_manual(values = country_col, name = "Country")
#t2_1 <- gheatmap(t2,species_heat,offset = 0.003, width = 0.1, colnames = FALSE, legend_title = "Species") +  scale_fill_manual(values = species_col, name = "Species")
t3 <- t2_1 + new_scale_fill()
#mbov_final <- gheatmap(t3,country_heat,offset = 0.006, width = 0.1, colnames = FALSE, legend_title = "Country") + scale_fill_manual(values = country_col, name = "Country")
mbov_final <- gheatmap(t3,species_heat,offset = 0.006, width = 0.1, colnames = FALSE, legend_title = "Species") + scale_fill_manual(values = species_col, name = "Species")
mbov_final
mbov_final
mad_final <- mbov_final
getwd()
#Metadata file presented to isolate_dat
isolate_dat = read.csv("../dependencies/filtered_isolate_list.csv",header = TRUE)
isolate_dat <- isolate_dat %>% left_join(plot.df,by=c("Sample"="id"))
# Tree developed from SNP alignment of M. bovis alignment
mbov_tree <- read.newick("/Users/noahaus/mbov_align.treefile")
#change labels
old_bov <- c("BOVINE-Michigan","BOVINE-UK","BOVINE-NZ")
for(i in 1:length(old_bov)){
isolate_dat$Species <- gsub(old_bov[i],"BOVINE",isolate_dat$Species)
}
old_cerv <- c("WTD-Michigan","ELK-Michigan","CERVINE-NZ")
for(i in 1:length(old_cerv)){
isolate_dat$Species <- gsub(old_cerv[i],"CERVINE",isolate_dat$Species)
}
isolate_dat$Species <- gsub("-UK","",isolate_dat$Species)
isolate_dat$Species <- gsub("-NZ","",isolate_dat$Species)
isolate_dat$Species <- gsub("-US","",isolate_dat$Species)
mbov_tree <- root(mbov_tree,"LT708304.1")
mbov_tree <- drop.tip(mbov_tree,"LT708304.1")
mbov <- ggtree(mbov_tree)
#Generate the data that will become rings that will surround the phylogeny
baps_heat <- as.data.frame(as.factor(isolate_dat$fastbaps))
rownames(baps_heat) <- isolate_dat$Sample
species_heat <- as.data.frame(as.factor(isolate_dat$Species))
rownames(species_heat) <- isolate_dat$Sample
country_heat <- as.data.frame(as.factor(isolate_dat$Country))
rownames(country_heat) <- isolate_dat$Sample
#color palettes
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cb_col <- colorRampPalette(cbPalette)
species_col <- hcl.colors(7, "Zissou 1")
country_col <- hcl.colors(3,"SunsetDark")
#ggtree to label nodes based on bootstrap support
mbov <- ggtree(mbov_tree)
mbov$data$support = -1
for (i in 1:length(mbov$data$isTip)){
if(mbov$data$isTip[i] == FALSE){
mbov$data$support[i] = as.numeric(mbov$data$label[i])
}
if(is.na(mbov$data$support[i])){
print("true")
mbov$data$support[i] = 0
}
else{
next
}
}
mbov$data$higher75 <- FALSE
mbov$data[mbov$data$support >= 75,]$higher75 <- TRUE
mbov_node_support <- mbov %<+% isolate_dat +
geom_point2(aes(subset=(!isTip & higher75 == TRUE),color=higher75),size = 1.5) +
#geom_point2(aes(color=col), show.legend = TRUE) +
scale_color_manual(values = c("black"), name = "Bootstrap Support", labels = c("75 or greater"))
t1 <- gheatmap(mbov_node_support,baps_heat,width = 0.1, colnames = FALSE,legend_title = "Population Cluster") + scale_fill_manual(values = cb_col(8), name = "Population Cluster")
t2 <- t1 + new_scale_fill()
t2_1 <- gheatmap(t2,country_heat,offset = 0.003, width = 0.1, colnames = FALSE, legend_title = "Country") +  scale_fill_manual(values = country_col, name = "Country")
#t2_1 <- gheatmap(t2,species_heat,offset = 0.003, width = 0.1, colnames = FALSE, legend_title = "Species") +  scale_fill_manual(values = species_col, name = "Species")
t3 <- t2_1 + new_scale_fill()
#mbov_final <- gheatmap(t3,country_heat,offset = 0.006, width = 0.1, colnames = FALSE, legend_title = "Country") + scale_fill_manual(values = country_col, name = "Country")
mbov_final <- gheatmap(t3,species_heat,offset = 0.006, width = 0.1, colnames = FALSE, legend_title = "Species") + scale_fill_manual(values = species_col, name = "Species")
mbov_final
mbov_final
ggtree(mbov_tree)
ggtree(midpoint_final)
midpoint_final
mbov_tree <- read.newick("/Users/noahaus/mbov_align.treefile")
mid_tree <- midpoint.root(mbov_tree)
mid_tree <- drop.tip(mid_tree,"LT708304.1")
ggtree(mid_tree)
mbov_tree <- read.newick("/Users/noahaus/mbov_align.treefile")
mad_tree <- mad(mbov_tree)
mad_tree <- drop.tip(as.phylo(mad_tree),"LT708304.1")
mad_tree
mad_tree <- read.tree(text=mad_tree)
grid.arrange(mbov_tree,mid_tree,mad_tree)
ggtree(mbov_tree)
plot(ggtree(mbov_tree))
plot(ggtree(mid_tree))
plot(ggtree(mad_tree))
out <- ggtree(mbov_tree)
mid <- ggtree(mid_tree)
mad1 <- ggtree(mad_tree)
grid.arrange(out,mid,mad1)
grid.arrange(out,mid,mad1,nrow=1)
ggtree(mbov_tree) + labs(tag = A)
ggtree(mbov_tree) + labs(tag = "A")
out <- ggtree(mbov_tree) + labs(tag = "A")
mad1 <- ggtree(mad_tree) + labs(tag = "C")
mid <- ggtree(mid_tree) + labs(tag = "B")
grid.arrange(out,mid,mad1,nrow=1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(plotly)
rt <- read.csv("snpcalling_runtimes.csv",header = FALSE)
head(rt)
rt <- subset(rt,V1 !=500)
rt %>% ggplot(aes(as.factor(V1),V2/60)) +
geom_violin(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
theme(axis.title = element_text(size = 15))
rt %>% ggplot(aes(V1,V2/60)) +
geom_point(fill = "gray") + theme_minimal() +
xlab("# of isolates") +
ylab("Runtime (min)") +
geom_smooth(aes(V1,V2/60),color = "black",method="lm") +
theme(axis.title = element_text(size = 15))
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
accessory_pa$gene_name <- rownames(accessory_pa)
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa))
heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
accessory_pa$gene_name <- rownames(accessory_pa)
long_prab <- accessory_pa %>% pivot_longer(!gene_name, names_to = "sample", values_to = "present")
long_prab %>% ggplot(aes(x=gene_name,y=sample,fill=present)) +
geom_tile() +   scale_fill_manual(label=c("absent","present"),values=c("white","black")) +
theme(text = element_text(size = 15),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks =element_blank(),
legend.key = element_rect(fill = "white", colour = "black")
)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores$country <- mbov_meta$Country
View(mbov_meta)
View(scores)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores <- scores[rownames(scores) != "gene_name",]
setwd("/Users/noahaus/mbovpan/auxilary/")
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores <- scores[rownames(scores) != "gene_name",]
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
fig <- plot_ly(scores, x = ~PC1, y = ~PC2, z = ~PC3, color = ~species, colors = c('#BF382A', '#0C4B8E'))
plot_ly(scores, x = ~PC1, y = ~PC2, z = ~PC3, color = ~species, colors = c('#BF382A', '#0C4B8E'))
ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores <- scores[rownames(scores) != "gene_name",]
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
fig <- plot_ly(scores, x = ~PC1, y = ~PC2, z = ~PC3, color = ~species, colors = c('#BF382A', '#0C4B8E'))
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
accessory_pa$gene_name <- rownames(accessory_pa)
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa))
heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
View(accessory_pa)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
#accessory_pa$gene_name <- rownames(accessory_pa)
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa))
#heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
View(pa_transpose)
View(accessory_pa)
data.matrix(accessory_pa)
t(accessory_pa)
pa_transpose <- t(accessory_pa)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
#accessory_pa$gene_name <- rownames(accessory_pa)
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(accessory_pa)
#heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
as.data.matrixaccessory_pa
as.data.matrix(accessory_pa)
data.matrix(accessory_pa)
data.matrix(accessory_pa) - 1
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
##edit the gene presence absence to be numeric.
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
#accessory_pa$gene_name <- rownames(accessory_pa)
##let's transpose the dataframe by turning it into a matrix first.
pa_transpose <- t(data.matrix(accessory_pa)-1)
#heatmap(pa_transpose, scale = "none", Rowv = NA, Colv = NA, col = c("white","blue"), main = "Mycobacterium bovis Accessory Genome",labRow = NULL,labCol = NULL)
library("ggplot2")
prab_pca <- prcomp(pa_transpose)
variance <- (prab_pca$sdev)^2
loadings <- prab_pca$rotation
rownames(loadings) <- colnames(pa_transpose)
scores <- prab_pca$x
varPercent <- variance/sum(variance) * 100
prin_comp <- paste0("PC",1:10)
data <- data.frame(prin_comp,varPercent[1:10])
ggplot(data, aes(x=reorder(prin_comp, -varPercent[1:10]), y=varPercent[1:10], )) +
geom_bar(stat = "identity",fill='steelblue', color="steelblue") +
geom_text(aes(label=paste0(signif(varPercent[1:10],3)," %")), vjust=1.6, color="white", size=3.5) +
labs(x = "Principal Components", y= "% of Explained Variance") +
ggtitle("PCA - Scree Plot") +
theme_minimal()
mbov_meta <- read.csv("UK_meta.csv",header = TRUE, stringsAsFactors = FALSE)
scores <- as.data.frame(scores[,1:5])
scores <- scores[rownames(scores) != "gene_name",]
scores$country <- mbov_meta$Country
scores$species <- mbov_meta$Species
scores$instrument <- mbov_meta$Instrument
country.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = country, col = country)) +
geom_point() +
theme_minimal()
species.clust <- ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
fig <- plot_ly(scores, x = ~PC1, y = ~PC2, z = ~PC3, color = ~species, colors = c('#BF382A', '#0C4B8E'))
ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
ggplot(as.data.frame(scores),aes(x=PC3,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
plot_ly(scores, x = ~PC1, y = ~PC2, z = ~PC3, color = ~species, colors = c('#BF382A', '#0C4B8E'))
ggplot(as.data.frame(scores),aes(x=PC1,y=PC2, fill = species, col = species)) +
geom_point() +
theme_minimal()
install.packages(c("FactoMineR", "factoextra"))
MCA(pa_transpose,ncp=5,graph=TRUE)
library(factoextra)
library(FactoMineR)
MCA(pa_transpose,ncp=5,graph=TRUE)
i=0
while(i < ncol(pa_transpose)){
i=i+1
pa_transpose[,i] = as.factor(pa_transpose[,i])
}
MCA(pa_transpose,ncp=5,graph=TRUE)
pat <- data.frame(pa_transpose, stringsAsFactors = TRUE)
MCA(pat,ncp=5)
pat <- lapply(pa_transpose, factor)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = TRUE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- "PRESENT"
accessory_pa[accessory_pa==""] <- "ABSENT"
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = TRUE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = TRUE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
pat <- t(accessory_pa)
View(pat)
pat[1,1]
pat[1,1] == "PJFIDHPA_01615"
pat[pat==""]
pat[pat == 0]
pat[pat == ""]
pat[pat == "",]
pat[,pat == ""]
pat[is.na(pat)]
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = TRUE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
pat <- data.frame(t(accessory_pa))
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = TRUE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
pat <- data.frame(t(accessory_pa))
View(pat)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
pat <- data.frame(t(accessory_pa))
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
pat <- data.frame(t(accessory_pa),stringsAsFactors = TRUE)
View(pat)
pat[,1]
MCA(pat)
mbov.mca <- MCA(pat)
mbov.mca$ind$coord
View(mbov.mca$ind$coord)
plot(mbov.mca$ind$coord[,1:2])
fviz_mca_var(mbov.mca,
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
pat <- data.frame(t(accessory_pa),stringsAsFactors = FALSE)
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(pat, method = x)$ac
}
map_dbl(m, ac)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
pat <- data.frame(t(accessory_pa),stringsAsFactors = FALSE)
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(pat, method = x)$ac
}
map_dbl(m, ac)
gene_pres_abs <- read.csv("gene_presence_absence.csv", header = TRUE, stringsAsFactors = FALSE, row.names = "Gene")
accessory_genome <- gene_pres_abs[!(is.na(gene_pres_abs$Accessory.Fragment)),]
core_genome <- gene_pres_abs[is.na(gene_pres_abs$Accessory.Fragment),]
accessory_genome_non_unique <- accessory_genome
auxil <- gene_pres_abs %>% select(2:14)
accessory_pa <- accessory_genome_non_unique %>% select(14:(ncol(accessory_genome_non_unique)))
accessory_pa[!(accessory_pa=="")] <- 1
accessory_pa[accessory_pa==""] <- 0
pat <- data.frame(t(accessory_pa),stringsAsFactors = FALSE)
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
cluster::agnes(pat, method = x)$ac
}
map_dbl(m, ac)
hc3 <- agnes(pat, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
hc3 <- cluster::agnes(pat, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
library(cluster)
hc3 <- cluster::agnes(pat, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
